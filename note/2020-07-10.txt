시리즈, 메디칼.. 3일 정도 소요..문제 풀고 디테일하게 볼 생각이라 1주일 정도 걸림
데이터 분석에 대한 핵심적인 내용 정리

Numpy PDF 3-5
꼬라지는 리스트하고 똑같다.
콤마(,) 차이
메모리 효율성
자료형 - 리스트는 서로 다른 자료형이 들어갈 수 있지만, Numpy는 하나의 자료형으로 모두 변환됨.. 즉 하나의 자료형만 들어감
dtype, type, astype?? 하나는 앞에 확인하고 다시 정리

리스트는 원본이 변환되지 않음
Numpy는 원본이 변환 - 메모리 효율성이 높다

연산을 처리하는 속도가 빠르다
이미지 처리할 때는 CPU만으로 힘들어서 GPU가 나옴
GPU 200만원 짜리 달아서 써야 하지만.. 그렇게 할 레벨도 안되니 30만원짜리 사야하는데
GPU 서버를 구글에서 무료로 제공하는 것이 있어서 빅데이터.. 다루는 
연산 처리하는 속도가 필요하므로.. 메모리랑도 연관, 어떤 라이브러리를 쓰냐에 따라서 차이가 난다
딥에서 쓰는 라이브러리를.. 텐서플로보다 파이토치를 쓰는 이유가 메모리 효율성이 좋다

Numpy에서 알아야 하는 함수나 속성은 끝까지 알아야 함
array, random은 필수, shape은 필드처럼 사용하기도 함
행과 열을 바꾸는 reshape..
3차원은 딥에서 다루지만 데이터 분석은 2차원
ndim을 통해 몇 차원인지 확인할 수 있음

랜덤함수가 많이 다뤄지는 이유
노출되는 데이터도 있을 수 있지만
분석가들이 어떤 수치를 나타내는지 모를 경우가 있음
고객에 대한 정보는 시크릿한 정보니까.. 난수와 비슷한 정보로 보내줌
특히 보험사, 금융권에 많음

데이터를 가공해서 만들어보는데 난수를 쓴다
데이터의 값어치를 가지려면 정규분포를 따라야 한다.
데이터를 분석하려면 정규분포를 따르는 데이터를 만들기에는 어려우므로
random을 사용하면 정규분포에 해당하는 값을 갖기가 편함

random은 난수가 바뀌니까
고정적인 값으로 바꾸는 게 seed
머신의 시간을 기준으로 난수 값이 나오지만
seed값을 주면 그 값에 의해서 알고리즘이 돌아감
고정적인 랜덤값들이 주어짐

seed는 한번 주면 끝난다.

어떻게 이게 돌아가는지를 알면 어떤 스텝이어도 나아갈 수 있음

이 기술을 만들었을 때 왜 만들었는가를 생각해야 함
ones가 왜 필요할까? 등등의 생각을 하면 좋음

원래 이유가 아니어도 상관없음.. 내 이유가 타당하면 그만

n by n을 만들기 위해서 나온게 eye .. 단위행렬
eye 구조를 잘 알고 있으면 좋음

인덱싱과 슬라이싱이 중요!
인덱싱만 쓰면 하나의 데이터(값)만 추출할 수 있다... 스칼라값 (DB에서도 함)
서브쿼리하면서 사용했던.. 스칼라는 정확한 의미가 one row, one column.. 하나의 값만 추출

슬라이싱은 둘다.. 1:2..스칼라 값을 가질 수도 있음.. 그런데 슬라이싱으로 스칼라 값을 추출하지는 않음
여러개의 값 추출

슬라이싱을 하려면 인덱싱 필요

1차원은 쉽지만 2차원은 쫌 어렵지만 결국 해결

-- 슬라이싱 조건 (3-16)

numpy.where : 삼항연산자랑 똑같음

통계함수는 pandas가서 또 다룸
sum을 하든 mean을 하든 어떤 기준인지.. axis=0과 1 구분할 줄 알아야 함

난수생성 (3-21)
uniform 등은 안 다뤄도 됨..
shuffle은 여기서는 섞을 일이 없지만 딥러닝 갔을 때 skrun..? 데이터가 
인종에 대한 흑인 - 백인 - 황인종.. 몰아서 담겨져 있어서 머신이 배우기 적합하지 않음
학습이 제대로 안되므로 섞어버림

왜 셔플을 해야하는지를 알아야 함
지금으로써는 쪼개는 게 중요

================================================================================================

Pandas (PDF - 4)

numpy기반..

4-5.. Pandas 자료구조
파이썬에서는 리스트, 딕셔너리, 셋, 튜플
pandas에서는 자료구조가 Series (1D - 벡터 구조, 1차원), DataFrame(2D - 행과 열, Matrix, 2차원), Panel(3D - 우리가 쓰지 않음)

index는 행을 떠오르기..

series.. numpy배열하고 똑같음.. 1차원,,
원래 인덱스가 0, 1, 2, 3, 4라면 --> series는 A, B, C, D, E

DataFrame을 많이 쓰지만
numpy 배열과 비슷한 Series부터..

누락데이터는 결측값.. Null 값 같은거..
NaN의 타입은 float..
int끼리의 연산이 float이 된 이유는 누락데이터가 있을시 NaN이 있어서

그래프로 수치화하려면 numeric한 값만 가능

각각의 state, year, pop 이 series!
pop이 내장함수라서.. 오류!! 값이 아예 나오면 안되는데 전부가 다 나옴.. 이것도 문제

구글 'tips.csv' 검색
https://www.kaggle.com/ranjeetjain3/seaborn-tips-dataset

data가 어떻게 생겨먹었는지 먼저 알고 들어가기
모델을 구축하는 것도 좋지만 어떤 데이터를 인풋으로 받아들이는지를 알고 들어가기

데이타를 알려면 (이해하려면) 각각의 컬럼이 뭐를 의미하는지
컬럼은 Feature를 이해해야 한다,, 특징, 성향을 알아야 함
Feature가 많으면 속도가 느려진다.

column 뽑기가 더 힘듬.. 전략이 중요!

계층적 인덱스를 갖는다.
데이터 프레임을 막 생성하고.. 
데이터 프레임을 함수 정보만 갖는..
인포, 테일, 헤드, 인덱스, 컬럼스, values, shape


랜덤함수 써서..
weight..가 
Transpose.. 행과 열이 뒤바껴서 출력
3행 6열..
6행 3열로 Transpose라고 함

내부적으로 어떤 속성을 썼냐 그러면 


데이터 조회
head와 tail..
상위 5개 정도 보여준다.

PDF 4-21페이지
인덱스와 슬라이싱 방법
loc, iloc
loc는 라벨로 검색
iloc는 인덱싱으로 검색
at와 iat는 스칼라로.. 라벨과 인덱싱으로 각각 검색

정량화(수치화) 할 수 없는 컬럼은 나타나지 않는다

한글깨짐처리 :
read_csv('o', encoding='cp949')