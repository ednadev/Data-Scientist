8/24 : 프로젝트 시작 (4주)
9/21 : 파이널 프로젝트 발표 (9/25)

Strut1 - Strut2 -

Spring Framework
- Spring MVC Framework
- Spring DI Framework
- (일본) Spring JDBC Framework --> JPA, IBatis -> MyBatis, (미국 - Hibernate)
- Spring AOP Framework
- Spring Security Framework

여러개의 모듈들이 합쳐진 것을 Spring Framework라고 한다..
여러개의 모듈들을 모두 스프링꺼를 사용하지 않아도 됨

'Spring architecture' 구글 검색
https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/overview.html - 첫번째 이미지

1. Core Container = DI : 가장 먼저 해야 함
DI (Dependency Indection)
자바 - 상속과 헤징..
DI는 주입을 뜻함 헤징을 말함
의존한다는 얘기는 필요한 사람이.. 고객이 Dependency의 대상
Account가 Customer의 꽂힘.. 이 관계를 Framework로 다룸

2. AOP : OOP를 하다보면 부딪치는 경우가 있음.. 제외시킴 
개념 설명하는데만으로도 오래 걸리고 안쓰는 회사도 꽤 있음

3. JDBC : MyBatis 사용

4. Spring MVC : Web
Portlet이랑 Struts는 Spring 이전에 사용했던 기술

-- Maven 구조 : 수동으로 만들어보고 나서 들어갈 생각
-- 하나하나 설명하고나서 합칠 생각

https://www.egovframe.go.kr/wiki/doku.php?id=egovframework:rte:ptl:spring_mvc_architecture - 첫번째 이미지
이미 웹에서 다뤄봤기 때문에 구조가 눈에 들어옴

https://www.java4coding.com/contents/spring/spring-mvc-architecture
backward 방향 : Dependency.. 의존 방향.. 백단에서 시작 어디로 넘기는지, 개발자 입장
forward 방향 : 클라이언트에서 시작하는 요청 흐름은 개발자랑 상관 X

포트폴리오에서 이 두방향을 정확하게 명시하는 것이 중요!

개발자 입장에서 제일 중요한 건 DAO
Dependency 최전선에 있는 것이 DAO -- DB 모델링이 제일 중요
작업을 하다 보면 DAO 수정이 굉장히 많이 나옴
DAO 수정하면 Service 수정 --> Controller 수정.. 이런식으로 작업하게 되면 망함
도메인 별로 DAO가 여러개 나옴.. 한개로 나오는 미친 업체들도 있음

Enterprise 급으로 가게 되면 DAO가 발목을 잡음
DAO가 아무리 변경해도 Service를 수정하지 않도록 하는 방법으로는 뭐가 있을지
Dependency 관계를 끊어내면 됨.. 
Coupling --> 타이트한(생성자 주입, 자동차와 엔진의 관계), loose한(setter 주입, 자동차와 네비게이션의 관계)
이 자체를 끊어버리는 게 DI의 발상
DI : DAO의 독립성을 보장하기 위해.. 
스프링 프레임워크의 시작이 여기서 나옴

-----------------------------------------------------------------------------------

이클립스에서 스프링을 다루려면
STS.. 플러그인
Spring Tools..
현재 포턴 버전..? STS 파인딩 하는 게 안나옴
현재 버전이 높아서 못하므로 다른 이클립스 사용

----------------------------------------------------------------------

STS 사용
- 기존 서버 제거하고 톰캣 8.5로 변경
- 한글처리



Maven 구조에 대한 이해 + Spring Framework 라이브러리 각각의 모듈


Dynamic Web Project - src 제거
src에는 java code가 들어있음
html 파일은 태그 기반으로 다른 구조에서 배포
context.xml --> 얘가 같이 돌아가지만, 자바 코드가 아님
unitTest

캡퍼가 커진다는 얘기는 각각의 레이어마다 단위테스트가 굉장히 중요
우리가 알고있는 클래스는 src에 넣어야 하지만
test는 실행 파일이므로 같이 넣으면 안 된다.

src 폴더를 다각화 시킴

각각의 기능에 맞게 구조를 다각화 시킴
src/main/java -- java code
src/test/java -- ~Test, ~AppTest
src/main/resources - 메타데이터 (특정한 정보를 상수값으로 가지고 있는 파일)
추가

패키지.. 5개 이상은 사용함
스타트업이 패키지를 최소화한다는 얘기는 있지만 논외

Java Resources에서 작업하기

1. Tight한 Coupling
Hello ----◆ ~AppTest01
                  - Hello
                  - printMessage()
가장 전형적인 Dependency 관계

Hello에서 printMessage() --> sayHello()로 수정
그럼 AppTest01에서도 수정

.. coupling을 느슨하게 하는 방법 : 인터페이스 사용

2. 
Hello 인터페이스 <--- HelloImpl 클래스
- printMessage()         printMessage() 구현
--> 컴포넌트 (component)

~AppTest01
- Hello Type으로 HelloImpl 객체 : Hello hello = new HelloImpl(); - HelloImpl를 구상객체(실체 클래스)
- printMessage()

POJO : 
Plain - 어떤 첨가물도 없다 (implement나 이런 것이 전혀 없는)

재사용성을 가장 높이는 방법은
- 인터페이스 사용
- 실체 클래스명이 코드에 노출되면 안된다 : 객체 생성을 내가 하는 것이 아닌 컨테이너한테 맡기는 것이 DI

3.
[Interface] Hello : printMessage()
 <--
HelloImpl
 
==> 

(요 사이에 Core Container)

==>

HelloAppTest02 : 객체 생성하면 안됨 (IOC) --- "제어의 역전"
Core Container 사용 .. 스프링 프레임워크에서 가장 핵심이 되는 DI 컨테이너
 --> 이 안에서 객체 생성을 해준다. (구상 객체) .. 컴포넌트 Bean,,, 콩!

[Core Container = DI Container]
1. Bean 생성 : hello 생성
2. Bean 저장 : getBean()

개발자가 할 일은 주문서 작성

하나의 bean은 클래스 하나랑 똑같음
bean 필수 속성 : id, class

--------------------------------------------------------------------------------------------------------------------------------------

Core Container에서 필요한 라이브러리 : Beans, Core, Context, Expression Language [앞서 스프링 구조 사진 참고]
스프링 프레임워크는 라이브러리의 모듈화라는 것을 이해해야 함
해당 라이브러리들을 설치해야 한다

C:\edna\util\Spring\제공\spring-framework-4.0.0.RELEASE-dist\spring-framework-4.0.0.RELEASE\libs
한가지당.. 라이브러리, doc, 원본소스 압축된 것 

NoClassDefFoundError: org/apache/commons/logging/LogFactory
--> 라이브러리를 넣지 않았다.. 어떤 라이브러리를 넣지 않았는지 확인
--> spring 코어지만 apache도 쓰고.. 이곳 저곳 기술들을 사용하므로 에러가 생김

C:\edna\util\Spring\제공\spring-framework-3.0.2.RELEASE-dependencies\org.apache.commons\com.springsource.org.apache.commons.logging\1.1.1

필요한 라이브러리 5개.. 라이브러리 사이에서도 dependency가 일어남
Factory = 컨테이너.. 결국 컨테이너는 클래스 .. 그걸 라이브러리로 제공한게 Beans
HelloFactory : 강사님이 만든 DI 컨테이너

------------------------------------------------------------------------------------------------------------------------------------------

DI Container : 시발점이 DAO.. 문제가 생겨서 나옴
<interface> DAO <--- DAO Impl : Component 기반
Component를 Bean이라고 보면된다

[

  (추상클래스) BeanContainer <-- XMLBeanContainer (Factory)
  {
    1. Bean을 생성 dao
    2. Bean을 보관
  }

  <=== 읽어들인다
  [개발자 역할] bean.xml
  Bean 설정 문서 (오리지널 beanConfigration 파일)
  <bean id="dao" class="FQCN" />

] ---> getBean() : new 하지 않고도 객체 생성

앞 ClientTest에서 
DAO dao = new DAOImpl()로 사용했을시 재사용성을 떨어뜨림
new 키워드가 있으면 안됨 : 실체 클래스를 생성하면 안됨

DI 컨테이너에게 주는 걸 IOC,, 제어의 역전

daoImpl 만드는 거랑 같음.. bean은 싱글톤 구조로 만들어진다.

Dice --> Player -- > Test .. 테스트에서는 Player만 주입하면 Dice가 알아서 주입된다.

재사용성 떨어뜨리는 건 set, get..

==============================================================================================

1. 
DB -> DAO (DAO Impl) -> (Handler Mapper.. 등) -> Servlet -> Front
이중에서 DI가 나온이유는 DAO 재사용성을 위해 나옴

2. 
DAOImpl - DB : MyBatis (JDBC)
SpringJDBC를 알면 프레임워크가 뭔지 알 수는 있지만
그걸 안해도 굳이 아까운 시간 들여서 쓸 일 없다 생각해서 빠짐

3. Dispatcher Servlet, Handler Mapping, Model and View --> Spring MVC
Spring MVC 나오기 전에 strut2 <- strun1 <0 potrat..?

나중에 끌어당겨서 쓰는 게 maven

생성자에서 println 찍어보면 알 수 있음
DD에서 Preloading 기억!

getBean 이후 생성.. lazyLoading

--------------------------------------------------------------------------------------------

주사위 3개 + 사용자 4개 = 7개

---------------------------------------------------------------------------------------------

프레임워크에서는 기본생성자를 반드시 만들어줘야 한다

생성자로 만들때 옵션.. index, name, type 3가지 옵션이 있다.