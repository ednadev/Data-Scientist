Python --> 프로그래밍이 아닌 AI를 위해서 배움
R : 머신, 딥을 짜기에는..  -- 경쟁구도 : Matplot(.pyplot) : 데이터 분석하는 도구, 시각화, 데이터 가져오는데 쓰임
  --> 데이터 분석 정도만 해봤다 정도, 라이브러리가 존재하지 않음,, 그런데 R로 머신러닝이나 딥러닝을 사용하는 사람이 꽤 많음 (연구원들.. )

데이터 분석, 머신, 딥을 다 하려면 'Python' : 강력한 라이브러리가 탑재되어 있음

Python
- 데이타 타입
- 제어문
- Looping
- 함수 모듈

--> Tool : Anaconda (아나콘다; 큰뱀) - 파이참, 라이브러리 등 거의 다 가지고 있음.. 라이브러리나 다른 툴을 깔 필요가 없음
사용 이유 : 트렌드성(현업기반 가장 안정성, 확장성 높은 것)

============================================================================================================================== 2일이면 끝!

데이타 분석 (중요) --> 거품이 끼지 않는 학문 (AI는 거품이 상당히 끼어 있음)
{ AI의 핵심적인 기업 : 카카오, 네이버
카카오 딥러닝 전문가들이 가방을 싸고 있음 --> 공기업으로 (이유 : 뽀록나기전에 철밥통을 챙기려고...)
거품이 거치면 냉혹한 현실이 다가올 수 있음
데이타 분석과 프로그래밍이 굉장히 현실적, 인공지능이 중요하지 않은 건 아니지만 현재로써는 여러가지를 느낄 수 있음 }

사용 기술 (파이썬 라이브러리)
- Numpy (1시간에서 2시간 정도 가볍게,, 나머지는 머신러닝에서 또 다룸)
- Pandas
- Matplot : 시각화 라이브러리로 사용'

* pair 작업
데이터만 주고 분석해서 전략 짜서 전략을 세우고 데이터를 세우고 시각화를 최종적으로 세워라 하고 싶지만
데이터를 어떻게 가공할지에 대한 문제 정도는 줄 생각

============================================================================================================================== 3일이면 끝!

머신러닝 (ML)

지도 학습 방법론 (Supervised)
- Decision Tree -> Random Forest (꼭 알아야 함!!, Random Forest는 앙상블 기법에서 나옴)
- Linear Regression (중요.. 딥까지 이어짐, 머신러닝의 레이어를 깊게 쌓는 것, Linear가 여러개 쌓는다는 의미가 '딥'이랑 연결됨)
- Rogistic Regression (SVN) 

비지도 학습 방법론 (Unsupervised)
- Clustrering..? (Ic-Mean..)
- Collaborative Filtering

딥을 하기 위한 전조 작업

사용할 데이터는.. 싸이키 런 (Sk learn)
머신에서 가볍게 다룰 생각.. 전처리 한다는 게 뭘 의미하는지,
 타겟이 뭔지, 모델이 뭔지, 학습이 뭐지, 예측이 뭔지 등등..을 이해되는 상태에서 본론으로 넘어감
보통 머신이랑 딥은 따로 진행됨.. 현재 수업은 머신을 하고 딥을 하는 이유가 '딥'을 '딥'답게 하기 위해서

사용 기술
- Numpy

====================================================================================================================================== 

딥러닝
뉴럴 네트워크 (인간 신경계.. 사물을 인지하고 하는 걸 착안해서 기계가 고양이나 개를 판별하는 것 등)
뉴럴넷 신경망이 어떤 매커니즘이랑 연결되는지를 정확하게 알아야 함
대학원 수업 듣는다고 생각하면 됨 (한 학기 수업 정도를 받아간다 생각하면 됨)
동작 원리, 매커니즘 등을 알아야 함!
컨벌루션 레이어의 동작원리를 알고 싶어서 수업을 들으러 오는 학생도 있음
개념 위주로! 코드는 심플하고 좋은 코드로 한두개 돌려보는 정도

라이브러리를 사용해야 함.. 
라이브러리를 쓰고 커스터마이징을 할 생각 (커스터마이징은 업계에 가서 사용해보면서.. 시간이 오래 걸림)

라이브러리
- 텐서플로 : 많이 알려진 것, 연구원들 사이에서는 이제 사용 안함, 임베디드하고 모바일에만 강하고 이외에 장점은 없음, 구글에서 만들어짐, 코드가 직관적이지 않고 어려움, 텐서 진영의 어떤 기술들 개발자들을 위한 포럼이 없음. 질문을 올려도 해결할만한 단체가 없음, 튜토리얼도 약함
- 파이토치 : 1~2년전에 페이스북에서 만듦, 코드가 간결하면서 커스터마이징이 좋음, 파이토치 개발자를 위한 한국 포럼도 있음, 문제가 생기거나 depth가 있는 문제들을 해결할 수 있음, 연산하는 과정이 텐서와 다름, 연산하는 속도가 뛰어남

--> 따라서 파이토치로 진행될 예정

학생들이 많이 사용하는 라이브러리는 '케라스(keras)' : 전문가용으로는 사용할 수 없음, 구글 꺼, 텐서플로를 깔고 케라스를 사용, 장점은 엄청 간단함, 애들이 좋아함

즉, 사용 기술은
- Pytorch
- Keras

Linear~~, NN(뉴럴렌, ANN, RNN, DNN) -> CNN
ANN은 레이어 하나, DNN의 D는 Deep.. 레이어가 여러개인 것

1. ANN
2. DNN
3. (D)CNN : 이미 딥하기 때문에..D는 빠지고, C는 컨벌루션..?
        --> VGG 모델로 마무리

---> 전부 Image Processing으로 가져갈 예정

사용할 툴 : 주피터 노트북

이미지 프로세싱하는데 연산이 어마어마하게 일어남..
간단한 걸 돌리더라도 속도가 많이 걸릴 수 있음
CPU로 돌리기에 한계가 오는 일이 있음 .. GPU 서버로 돌려야 함
GPU 서버는 사야함 (30만원에서 300만원 정도 함) --- 그래서 하지 않기!
Colab : 주피터 노트북하고 GPU를 합쳐놓은 구글 드라이브로 작업 (미리 설치하지 않기) , 속도가 그렇게 오래 걸리지 않음


======================================================================================================================================

수업시작

'stack overflow programming languages' 구글 검색
https://insights.stackoverflow.com/survey/2019
https://codeburst.io/10-top-programming-languages-in-2019-for-developers-a2921798d652?gi=850bfa8d5b3d

장고와 자바의 중간 느낌이 '스칼라'
전반적으로 쓰진 않아도 부서별로 사용함
강사님이 앞으로 눈여겨 보는 언어가 '스칼라'!!

======================================================================================================================================

구글 '아나콘다' 검색
https://www.anaconda.com/products/individual

Anaconda Installers (파이썬은 3과 2가 호환이 되지 않음)
Python 3.7 : 64-Bit Graphical Installer (466MB)

PDF 36페이지 아나콘다.. 이후 설치는 PDF 보면서

이니셜 바로 밑에 anaconda3를 설치할 수 있도록 함
C:\edna\anaconda3

PATH 지정 하지 않음.. 빨간색 NO!

데이터 분석하는데 가장 많이 쓰는 툴은 주피터 노트북

Jupyter Notebook 속성
"%USERPROFILE%/" 지우고
"C:\edna\py_workspace"로 변경

시스템 환경 변수 편집 .. 
환경 변수
시스템 변수 - Path 
편집 눌러서 새로 만들기
C:\edna\anaconda3
C:\edna\anaconda3\Library
C:\edna\anaconda3\Scripts
3개 추가

확장자
.ipynb 뜻은
i는 interactive
py는 파이썬
nb는 노트북이라는 의미

py로 확장자를 바꿀 수 있음

* 단축키
실행은 Ctrl + Enter
주석은 Ctrl + /

----
PDF 45페이지부터
시퀀스 타입 문자열, 리스트, 튜플
문자열과 리스트 형태랑
셋과 딕셔너리 형태도 잘 봄
.. 가장 안 쓰는게 set

주피터에서 자동완성은 tab

-------------------------

문자열 함수 중요한 것 : len, split, join
split과 join은 반대개념
split은 리스트로 반환

리스트를 하나로 만드는 join의 반환값은 문자열

tuple은 반환되는 타입으로는 쓰이지만 굳이 내가 만들어서 쓸 일은 없음
리스트랑 딕셔너리를 많이 사용, set을 거의 쓰지 않음

?를 사용하면 실행했을때 구조를 확인할 수 있다
빨리감기로 restart 한번에 다 할 수 있음 (shift + enter도 너무 많아짐)
빨리감기랑 똑같은게 'Kernel - Restart & Run All'
